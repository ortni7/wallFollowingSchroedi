// Generated by gencpp from file ohm_mecanum_sim/WheelSpeed.msg
// DO NOT EDIT!


#ifndef OHM_MECANUM_SIM_MESSAGE_WHEELSPEED_H
#define OHM_MECANUM_SIM_MESSAGE_WHEELSPEED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ohm_mecanum_sim
{
template <class ContainerAllocator>
struct WheelSpeed_
{
  typedef WheelSpeed_<ContainerAllocator> Type;

  WheelSpeed_()
    : w_front_left(0.0)
    , w_front_right(0.0)
    , w_rear_left(0.0)
    , w_rear_right(0.0)  {
    }
  WheelSpeed_(const ContainerAllocator& _alloc)
    : w_front_left(0.0)
    , w_front_right(0.0)
    , w_rear_left(0.0)
    , w_rear_right(0.0)  {
  (void)_alloc;
    }



   typedef double _w_front_left_type;
  _w_front_left_type w_front_left;

   typedef double _w_front_right_type;
  _w_front_right_type w_front_right;

   typedef double _w_rear_left_type;
  _w_rear_left_type w_rear_left;

   typedef double _w_rear_right_type;
  _w_rear_right_type w_rear_right;





  typedef boost::shared_ptr< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> const> ConstPtr;

}; // struct WheelSpeed_

typedef ::ohm_mecanum_sim::WheelSpeed_<std::allocator<void> > WheelSpeed;

typedef boost::shared_ptr< ::ohm_mecanum_sim::WheelSpeed > WheelSpeedPtr;
typedef boost::shared_ptr< ::ohm_mecanum_sim::WheelSpeed const> WheelSpeedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator1> & lhs, const ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator2> & rhs)
{
  return lhs.w_front_left == rhs.w_front_left &&
    lhs.w_front_right == rhs.w_front_right &&
    lhs.w_rear_left == rhs.w_rear_left &&
    lhs.w_rear_right == rhs.w_rear_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator1> & lhs, const ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ohm_mecanum_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "563013483b74b26d9449c1178a7c0316";
  }

  static const char* value(const ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x563013483b74b26dULL;
  static const uint64_t static_value2 = 0x9449c1178a7c0316ULL;
};

template<class ContainerAllocator>
struct DataType< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ohm_mecanum_sim/WheelSpeed";
  }

  static const char* value(const ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 w_front_left\n"
"float64 w_front_right\n"
"float64 w_rear_left\n"
"float64 w_rear_right\n"
;
  }

  static const char* value(const ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.w_front_left);
      stream.next(m.w_front_right);
      stream.next(m.w_rear_left);
      stream.next(m.w_rear_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelSpeed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ohm_mecanum_sim::WheelSpeed_<ContainerAllocator>& v)
  {
    s << indent << "w_front_left: ";
    Printer<double>::stream(s, indent + "  ", v.w_front_left);
    s << indent << "w_front_right: ";
    Printer<double>::stream(s, indent + "  ", v.w_front_right);
    s << indent << "w_rear_left: ";
    Printer<double>::stream(s, indent + "  ", v.w_rear_left);
    s << indent << "w_rear_right: ";
    Printer<double>::stream(s, indent + "  ", v.w_rear_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OHM_MECANUM_SIM_MESSAGE_WHEELSPEED_H
